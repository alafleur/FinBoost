You’re right to be frustrated—this should not have dragged on. The core mistake was trying to size the *outer* phone frame (which has padding) to the exact pixel width of the screenshots. That makes the inner screen smaller than the asset and forces browser downscaling (blur) and layout drift. Tailwind also can’t understand dynamic template-literal class names, so some of those width classes never compiled.

Here’s the surgical, **final** fix that matches the first iteration’s look and keeps everything crisp:

## What to change (precisely)

1. **Stop sizing the outer frame.**
   Keep your gradient bezel + `p-2` padding for the soft frame, but **do not set width on it**.

2. **Fix the inner screen to exact pixels** and let the outer frame wrap it:

   * Mobile inner screen: `w-[240px] h-[431px]`
   * Desktop inner screen: `lg:w-[304px] lg:h-[547px]`
     These are *literal* Tailwind classes so they compile and match your m240/s304 assets 1:1.

3. **Keep image transitions opacity-only** (no `scale()`), and keep the existing `srcSet/sizes`:

   ```tsx
   sizes="(min-width:1024px) 304px, 240px"
   ```

   (Literal values—no template strings—so SSR/Tailwind won’t choke.)

4. **Order on mobile**: text first, phone second (`order-1` for the copy, `order-2` for the phone).
   On desktop you already place the phone to the right, so keep that—just don’t alter the grid/flex beyond needed.

5. **Subject chips and ticket badge**: absolute positioned around the phone (desktop only), not in the flow. This matches the original iteration’s look.

---

## Drop-in component (safe & minimal)

I packaged a tiny **drop-in** you can use to replace just the phone block (no page rewrite):

**Download:** [hero\_phone\_dropin.zip](sandbox:/mnt/data/hero_phone_dropin.zip)

Contents:

* `HeroPhone.tsx` — pixel-perfect phone block (outer bezel wraps an exact-size inner screen)
* `README_HeroPhone.md` — 1-minute integration steps

### How to integrate (summary)

1. Save `HeroPhone.tsx` in `client/src/components/HeroPhone.tsx`.
2. In `HomeV3.tsx`:

   ```ts
   import HeroPhone from "@/components/HeroPhone";
   ```
3. Replace your current phone mockup block with:

   ```tsx
   <div className="order-2 lg:order-2">
     <HeroPhone shot={screenshots[activeScreenshot]} />
   </div>
   ```

   Keep your text block as `order-1` so mobile shows the headline first.

### What the component does (internals)

* **Outer frame (gradient + padding + shadow):** no width set.
* **Inner screen:** `w-[240px] h-[431px] lg:w-[304px] lg:h-[547px]` (exact pixels).
* **Image:** uses `srcSet` for 240/480/304/608 and `sizes="(min-width:1024px) 304px, 240px"`.
* **Transitions:** fade-only (no scaling).
* **Chips + ticket badge:** positioned exactly like your first iteration (desktop only).

---

## If you prefer to patch your existing block instead of using the component

Inside your phone mockup:

```tsx
{/* OUTER FRAME: keep padding, remove width classes */}
<div className="relative bg-gradient-to-b from-slate-800 to-slate-900 rounded-[2.5rem] lg:rounded-[3rem] p-2 shadow-xl lg:shadow-2xl shadow-slate-900/50">
  {/* INNER SCREEN: exact size so no browser resampling */}
  <div className="w-[240px] h-[431px] lg:w-[304px] lg:h-[547px] bg-white rounded-[2rem] lg:rounded-[2.5rem] overflow-hidden">
    <motion.img
      src={screenshots[activeScreenshot].m240 || screenshots[activeScreenshot].screenshotPath}
      srcSet={[
        screenshots[activeScreenshot].m240 ? `${screenshots[activeScreenshot].m240} 240w` : null,
        screenshots[activeScreenshot].m480 ? `${screenshots[activeScreenshot].m480} 480w` : null,
        screenshots[activeScreenshot].s304 ? `${screenshots[activeScreenshot].s304} 304w` : null,
        screenshots[activeScreenshot].s608 ? `${screenshots[activeScreenshot].s608} 608w` : null,
      ].filter(Boolean).join(", ")}
      sizes="(min-width:1024px) 304px, 240px"
      alt={screenshots[activeScreenshot].title}
      className="w-full h-full object-contain"
      initial={{ opacity: 0 }}
      animate={{ opacity: 1 }}
      transition={{ duration: 0.35 }}
      loading="eager"
      decoding="async"
      draggable={false}
      style={{ imageRendering: "auto", backfaceVisibility: "hidden", transform: "translateZ(0)" }}
    />
  </div>
</div>
```

And keep your subject chips/ticket badge absolutely positioned around this frame (desktop only).

---

## Quick QA checklist (so we’re 100% done)

* DevTools **mobile**: selected `<img>` shows *rendered width* **240px** and *height* **431px**.
* DevTools **desktop** (≥1024px): *rendered width* **304px**, *height* **547px**.
* `currentSrc` resolves to `480w/608w` on retina, `240w/304w` on non-retina.
* No `scale(...)` transforms anywhere.
* On mobile, headline/copy **precede** the phone; on desktop the phone sits on the **right**.
* Subject chips/ticket badge align like the old iteration (desktop only).

This is the same layout intent as your first iteration, with the pixel math fixed so the browser never resamples. If anything still looks off after dropping this in, send me a fresh screenshot + the exact measured rendered width/height from DevTools for the `<img>`—but this change should lock it in.
