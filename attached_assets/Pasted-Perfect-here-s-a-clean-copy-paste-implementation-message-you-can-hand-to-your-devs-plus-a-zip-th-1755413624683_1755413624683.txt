Perfect — here’s a clean, copy-paste implementation message you can hand to your devs, plus a zip that’s already wired to your **actual component paths** and **current APIs**.

# FinBoost — Gamification Consolidation (Implementation)

## What this ships

* A **small composer** that lays out the gamification dashboard (Tickets / Tier / Countdown / Streak / Prediction / DebtBoost / Referrals / Rewards).
* A **registry** pre-mapped to your existing components:

  * Streak: `@/components/StreakNotification`
  * Referral: `@/components/ReferralSystem`
  * Prediction: `@/components/PredictionsContent`
  * DebtBoost & TicketActions: `@/components/PointsActions`
  * Rewards: `@/components/RewardsHistory`
  * Tier widget: `@/components/TierStats`
  * Ticket summary: `@/components/PointsSummary`
* A minimal **countdown** widget (since none exists).
* A hook that adapts to your **existing API**:

  * `/api/auth/me` → pulls `currentCyclePoints` and `tier`
  * `/api/pool/next-distribution` → pulls cycle end date

## Download

**[finboost-gamification-consolidation-wired.zip](sandbox:/mnt/data/finboost-gamification-consolidation-wired.zip)**

**Files in the zip**

* `client/src/components/gamification/registry.ts` (pre-filled with your paths)
* `client/src/components/gamification/GamificationDashboard.tsx` (composer)
* `client/src/components/gamification/lite/TicketMeterLite.tsx`
* `client/src/components/gamification/lite/TierTrackerLite.tsx`
* `client/src/components/gamification/lite/CycleCountdownLite.tsx`
* `client/src/hooks/useUserGamificationSummary.ts`
* `client/README-Gamification-Consolidation-Wired.md` (quick steps)

---

## How to implement (3 steps)

### 1) Add the files

Unzip into your repo, preserving paths shown above.

### 2) Wire the dashboard composer on the user Dashboard

Edit **`client/src/pages/Dashboard.tsx`**:

```tsx
import { useUserGamificationSummary } from "@/hooks/useUserGamificationSummary";
import GamificationDashboard from "@/components/gamification/GamificationDashboard";

// inside your component render:
const { data: summary, loading, error } = useUserGamificationSummary();
if (loading) return null;        // or your existing skeleton
if (error || !summary) return null;

return (
  <div className="space-y-6">
    <GamificationDashboard summary={summary} />
    {/* keep your existing dashboard blocks below */}
  </div>
);
```

### 3) Verify

* Logged-in user hits Dashboard:

  * Ticket block shows `currentCyclePoints` (as Tickets).
  * Tier block shows **Top/Mid/Bottom** (mapped from `"tier1" → top`, `"tier2" → mid`, others → bottom).
  * Countdown shows time to next distribution (from `/api/pool/next-distribution`).
  * Your existing **Streak**, **Prediction**, **DebtBoost**, **Referrals**, **Rewards** components render in their slots.

---

## Notes (no surprises)

* We’re **not** renaming Points→Tickets here (you said to skip for now). The UI labels in the new blocks say “Tickets”, but your existing components will keep their current copy until you update them.
* We didn’t add Quests (you don’t have them yet). The composer leaves that slot empty without errors.
* `progressToNextTier` and `hintTicketsToNext` are set to `0/null` intentionally. If you expose server-side values later (e.g., `/api/tiers/thresholds` mapped to user progress), we’ll pass them through—no UI changes needed.

If you want me to also include a tiny PR-ready diff for `Dashboard.tsx` once you paste its current contents, I’ll patch it and send back the drop-in file.
