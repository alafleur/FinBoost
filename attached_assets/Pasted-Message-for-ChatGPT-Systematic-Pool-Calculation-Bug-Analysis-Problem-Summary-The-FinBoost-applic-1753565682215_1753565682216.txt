Message for ChatGPT: Systematic Pool Calculation Bug Analysis
Problem Summary:
The FinBoost application has a critical architectural flaw where pool calculation business logic is duplicated across multiple API endpoints instead of using a centralized method. This violates DRY principles and creates data inconsistencies.

Current Situation:

Pool calculations show different values across admin dashboard tabs ($5,000 vs $3,750 vs expected $7,500)
One centralized method getCyclePoolData() in server/storage.ts contains the CORRECT logic
Multiple endpoints in server/routes.ts have their own hardcoded calculations that are INCORRECT
Correct Calculation Logic (in storage method):

1500 users × $20 membership fee × 0.5 (bi-weekly multiplier) × 50% reward pool = $7,500
Since $7,500 > $5,000 minimum guarantee, final pool = $7,500
Endpoints That Need Systematic Refactoring:

/api/pool/monthly - Currently shows $5,000 (likely using old logic)
/api/cycles/pool - Shows $5,000 (may have issues)
/api/admin/cycles/:id/analytics - FIXED (now uses storage method)
Any other admin endpoints with hardcoded pool calculations
Required Fix Strategy:

Audit Phase: Search server/routes.ts for ALL instances of pool calculation logic (look for patterns like membershipFee, rewardPoolPercentage, * 20, * 0.5, etc.)

Refactor Phase: Replace every hardcoded calculation with calls to the centralized storage.getCyclePoolData(cycleId) method

Validation Phase: Ensure all admin dashboard tabs show the consistent $7,500 value

Root Cause:
Instead of following best practices with a single source of truth, the codebase has multiple implementations of the same business logic scattered across different endpoints. This creates a maintenance nightmare where fixing one location doesn't fix others.

Question for ChatGPT:
Can you help identify the systematic approach to find and replace ALL hardcoded pool calculations in the routes file to use the centralized storage method? The user has lost trust due to repeated partial fixes that don't solve the underlying architectural problem.