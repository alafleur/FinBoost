Perfect—let’s dive into the Point-Weighted Reward System first. This is the heart of your reward model, and getting it right lays the foundation for everything else (AMOE, predictions, tiers).

Here’s a clear breakdown + implementation-ready plan for your Point-Weighted Lottery System based on the existing code structure you shared on GitHub.


---

🏆 FinBoost Point-Weighted Reward System (Implementation Plan)


---

✅ Core Principles You’ve Defined:

1. Users earn points through learning, actions, predictions, referrals, etc.


2. Users are grouped into tiers (Top/Mid/Bottom third based on points).


3. At cycle end:

Rewards are distributed based on a random draw weighted by each user’s point total within their tier.



4. AMOE entries (if any) are added to the appropriate tier with a default point value.




---

🔑 System Requirements:

Feature	Requirement

🏁 Input	List of users + their point totals (already tracked)
🎯 Tiers	Users must be sorted into Top, Mid, Bottom groups dynamically
🎲 Weighted Random	Each user’s probability of selection is proportional to their point total
🎁 Reward Distribution	Each tier has fixed prize amounts or shares of the pool
📊 Transparency	Results should be stored/displayed (user-side + admin-side)



---

🏗 Technical Implementation (Step-by-Step)


---

1️⃣ User Tier Calculation (Backend — likely storage.ts or new service file)

✅ You already have point tracking → now we:

Sort users by total points.

Divide into:

Tier 1 (Top 33%)

Tier 2 (Mid 33%)

Tier 3 (Bottom 33%)



👉 Suggested function:

function calculateTiers(users: { id: string; points: number }[]): { tier1: User[]; tier2: User[]; tier3: User[] } {
  const sorted = [...users].sort((a, b) => b.points - a.points);
  const total = sorted.length;
  const tier1 = sorted.slice(0, Math.ceil(total / 3));
  const tier2 = sorted.slice(Math.ceil(total / 3), Math.ceil(total * 2 / 3));
  const tier3 = sorted.slice(Math.ceil(total * 2 / 3));
  return { tier1, tier2, tier3 };
}

✅ Store each user's tier in DB (users table → add currentTier field or in a separate cycle snapshot table).


---

2️⃣ Weighted Random Selection (Backend — new helper function)

✅ Implement a weighted random draw within each tier:

👉 Suggested function:

function weightedRandomSelection(users: { id: string; points: number }[], numberOfWinners: number): string[] {
  const totalPoints = users.reduce((sum, user) => sum + user.points, 0);
  const winners: string[] = [];
  
  while (winners.length < numberOfWinners && users.length > 0) {
    const rand = Math.random() * totalPoints;
    let cumulative = 0;
    for (let i = 0; i < users.length; i++) {
      cumulative += users[i].points;
      if (rand <= cumulative) {
        winners.push(users[i].id);
        totalPoints -= users[i].points;
        users.splice(i, 1);
        break;
      }
    }
  }
  return winners;
}

✅ This ensures higher point totals = higher selection odds but no one is guaranteed.


---

3️⃣ Reward Allocation per Tier (Configurable)

✅ Store in your pointsConfig.ts or create a new rewardsConfig.ts:

export const rewardDistribution = {
  tier1: { pool: 50, numWinners: 3 },  // 50% of prize pool
  tier2: { pool: 35, numWinners: 2 },
  tier3: { pool: 15, numWinners: 1 },
};

✅ Make this admin-editable later → but config file is fine for MVP.


---

4️⃣ Admin Trigger (Admin Portal Action)

✅ Add a “Run Reward Draw” button in the admin portal (client/src/components/admin/):

Calls backend route /api/reward-draw (POST).

Backend runs:

Calculate tiers

Run weighted random per tier

Store winners in DB table (rewardWinners) with: userId, rewardCycleId, tier, prizeAmount.



✅ Response displays the winners immediately in the admin panel.


---

5️⃣ User-Side Display:

✅ In dashboard:

Show users:

Their tier (Top, Mid, Bottom)

Their points

Their reward draw eligibility (“You have a 1 in X chance to win!”).



✅ After reward draw:

Display winning users and past rewards.



---

📝 Deliverables I Can Provide:

1. Full code snippets for:

Tier calculation

Weighted random function

Backend /api/reward-draw route



2. Suggested UI design for admin “Run Draw” button + winner display.


3. Suggested user-facing messaging to explain fairness and odds.




---

👉 Would you like me to:

Generate the backend functions + route code first?

Or start with the admin panel UI + instructions?


Just let me know where you’d like to begin.

