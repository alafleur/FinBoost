Thank you—that’s an incredibly helpful clarification, and you’re right: this dynamic percentile-based tier system is much more sophisticated than the basic fixed-split model I described earlier.

✅ I now fully understand your current implementation and how it’s designed to be adaptive, admin-configurable, and fair regardless of the size or distribution of the user base.

Let me reset and give you the corrected model summary + how to layer the Point-Weighted Reward System on top of this existing dynamic tier system.


---

🔄 FinBoost Dynamic Percentile Tier System (Confirmed)

✅ Key Components You Already Have:

Component	Function

Admin-Controlled Percentiles	Admins configure dynamic cutoffs (default: 33%, 67%) stored in cycle_settings.
Real-Time Calculation	calculateDynamicTierThresholds() recalculates Tier 1 and Tier 2 boundaries based on actual user point distribution each cycle.
Non-Engaged Users = Tier 3	All 0-point users automatically drop into Tier 3 (regardless of percentile).
API Endpoint	/api/cycles/current/tier-thresholds provides up-to-date tier cutoffs.
User Data	Individual user point totals live in user_cycle_points.


✅ This is a responsive system that avoids static thresholds and automatically adapts to how competitive the cycle actually is.


---

🏆 How to Implement the Point-Weighted Reward System Using This Tier System:


---

🎯 Key Principle:

Tier assignment is already dynamic → no need to change this.

The point-weighted selection happens within each dynamically calculated tier group.



---

Step-by-Step Plan (Corrected):


---

1️⃣ At Cycle Close: Tier Users Based on Current Logic (✅ Already Done)

Use existing /api/cycles/current/tier-thresholds to:

Get Tier 1 cutoff

Get Tier 2 cutoff

Assign users into Tier 1, 2, or 3 based on:

Their point totals

The dynamic thresholds



Users with 0 points = Tier 3 by default.


✅ No changes needed here.
✅ Keep dynamic calculation as is.


---

2️⃣ Run Point-Weighted Selection Within Each Tier:

For each tier (1, 2, 3), perform a weighted random selection where:

Each user’s chance of winning = (user points) ÷ (total points of all users in the tier)

This ensures:

High performers have higher odds

Low performers retain some chance




👉 Example pseudocode for weighted selection:

function runWeightedDraw(users: { id: string; points: number }[], winnersCount: number): string[] {
  const totalPoints = users.reduce((sum, u) => sum + u.points, 0);
  const winners: string[] = [];

  while (winners.length < winnersCount && users.length > 0) {
    const rand = Math.random() * totalPoints;
    let cumulative = 0;
    for (let i = 0; i < users.length; i++) {
      cumulative += users[i].points;
      if (rand <= cumulative) {
        winners.push(users[i].id);
        totalPoints -= users[i].points;
        users.splice(i, 1);
        break;
      }
    }
  }

  return winners;
}

✅ This function respects relative user performance within the actual engagement landscape of the cycle.


---

3️⃣ Admin Configuration for Reward Allocation:

Admin Setting	Stored In	Purpose

Number of winners per tier	cycle_settings or similar	Controls how many winners each tier produces
Total reward pool or fixed reward per tier	cycle_settings	Controls reward size or distribution logic


✅ This makes the entire system fully flexible and tunable by the admin without needing code changes.


---

4️⃣ Store Reward Results:

For each cycle:

Store:

Cycle ID

Tier

Winner User ID

Prize amount

Time of draw




✅ This allows for user-side “Past Rewards” views and future auditing.


---

5️⃣ User-Side Messaging:

Users see:

Their current tier

Their points

How many prizes will be awarded in their tier

That their chances increase with higher point totals (but everyone in the tier has a shot).



✅ This messaging preserves hope + motivation without guaranteeing outcomes.


---

🚀 Summary of Correct Implementation Plan (With Your Actual System):

Step	Status

Tier thresholds = admin-controlled percentiles → dynamic calculation ✅ Already Done	
Users assigned tiers based on thresholds + 0-point rule ✅ Already Done	
Weighted random draw per tier → determines winners ❌ To Be Implemented	
Admin can control winners-per-tier + prize allocation ❌ To Be Implemented	
Winners stored in DB + shown to admin and users ❌ To Be Implemented	



---

👉 Next Steps I Can Help With:

1. Write the backend code for the weighted draw based on your existing storage.ts and cycle_settings.


2. Draft the admin panel UI flow for triggering and viewing draws.


3. Write the user-facing copy for explaining how the reward chances work.



✅ Where would you like to start? Backend, Admin UI, or User Messaging?

