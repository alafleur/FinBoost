You and Replit are exactly right—the fix is to actually **render the pixel-perfect variants via `srcSet`/`<picture>` and lock CSS widths**. Here’s a drop-in you can use plus the minimal steps to wire it.

# TL;DR (what to change)

* Stop using a single `screenshotPath`.
* For each step/screen, provide **mobile 1x/2x** (240×431 / 480×862) and **desktop 1x/2x** (304×547 / 608×1094).
* Render with `<picture><source media="(min-width:768px)" ... /><img ... /></picture>`.
* **Lock the rendered width** to **240px on mobile, 304px on desktop** (no percentages).
* Optional: only rotate on `md+` to avoid mobile transform blur: `className="md:rotate-[8deg]"`.

# Drop-in component (download and use)

**DeviceScreenshot.tsx** (React + Tailwind):
[Download](sandbox:/mnt/data/finboost-responsive-screenshot/DeviceScreenshot.tsx)

Usage example:

```tsx
import DeviceScreenshot from "@/components/DeviceScreenshot";
// imports for your assets
import step1_m240 from "@/assets/step1_m240.png";
import step1_m480 from "@/assets/step1_m480.png";
import step1_s304 from "@/assets/step1_s304.png";
import step1_s608 from "@/assets/step1_s608.png";

<DeviceScreenshot
  alt="Step 1 — Learn & earn"
  mobile={{ x1: step1_m240, x2: step1_m480, width: 240, height: 431 }}
  desktop={{ x1: step1_s304, x2: step1_s608, width: 304, height: 547 }}
  className="md:rotate-[8deg]"   // rotate only ≥ md to keep mobile crisp
  priority                       // eager-load if this is your LCP
/>
```

# Minimal code changes Replit should make

1. **Update your data structure**

   ```ts
   type Shot = {
     id: string;
     alt: string;
     mobile: { x1: string; x2: string; width: number; height: number };
     desktop:{ x1: string; x2: string; width: number; height: number };
   };

   const screenshots: Shot[] = [
     {
       id: "step1",
       alt: "Step 1 — Learn & earn",
       mobile: { x1: step1_m240, x2: step1_m480, width: 240, height: 431 },
       desktop:{ x1: step1_s304, x2: step1_s608, width: 304, height: 547 },
     },
     // ...
   ];
   ```
2. **Replace your `<img src={...screenshotPath} />`** with:

   ```tsx
   <DeviceScreenshot
     alt={screenshots[active].alt}
     mobile={screenshots[active].mobile}
     desktop={screenshots[active].desktop}
     className="md:rotate-[8deg]"
     priority
   />
   ```
3. **Remove percentage sizing** like `w-[76%]`; use exact widths:

   ```html
   className="block w-[240px] md:w-[304px] h-auto"
   ```
4. **Keep aspect ratios exact** (don’t set arbitrary heights). Let height be `auto`.
5. **Preload the LCP image** (optional but nice):

   * If you control `index.html`, add a preload:

     ```html
     <link
       rel="preload"
       as="image"
       imagesrcset="/assets/step1_s304.png 1x, /assets/step1_s608.png 2x"
       imagesizes="304px"
       href="/assets/step1_s304.png"
       media="(min-width:768px)"
       fetchpriority="high"
     />
     ```

     and a mobile counterpart for `<768px>`.

# Notes on rotation blur

Even with perfect assets, **CSS transforms** (e.g., `rotate-[8deg]`) cause slight interpolation blur. The best compromise is **no rotation on mobile** (where crispness matters most), and rotate only on desktop: `className="md:rotate-[8deg]"`.

# Quick verification checklist

* In DevTools, inspect the image: **Rendered size = file’s 1x size** (240×431 mobile, 304×547 desktop).
* In Network tab on DPR=2 devices, you should see the **2x** file fetched.
* No `%` widths or `max-w` constraints that trigger resampling.
* No CSS scale transforms on the image itself.

Want me to integrate this into your exact component file? If you upload it, I’ll return a ready-to-drop replacement.
